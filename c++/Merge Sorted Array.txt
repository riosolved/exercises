Merge Sorted Array
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

***************************

Example 1:
	Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
	Output: [1,2,2,3,5,6]
	Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
	The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.

***************************

class Solution {
public:
    void merge(
        vector<int>& nums1,
        int m,
        vector<int>& nums2,
        int n
    ) {
        int x = m - 1;
        int y = n - 1;
        int position = 0;

        /*
        * GIVEN,
        * A: [1,0]
        * B: [3]
        *
        * i:1 (working from (A.size() - 1) to 0)
        *   - a: 0 (pointing to 1 at A)
        *   - b: 0 (pointing to 3 at B)
        *   - z: 1 (pointing to 0 at A)
        *
        *   CASE: A[a] (1) > B[b] (3)
        *       - CONDITION NOT MET
        *   CASE: B[b] (3) > A[a] (1)
        *       - CONDITION MET
        *       - A[z] = B[b]
        *       - b--
        *
        *   z--
        * i:0
        *   - a: 0 (pointing to 1 at A)
        *   - b: -1 (OUT OF BOUNDS)
        *   - z: 0 (pointing to 1 at A)
        *
        *   CASE: B IS NOW OUT OF BOUNDS
        *       - BREAK
        */

        //TIME : O(n + m) , SPACE: O(1) as we're not storing anything into memory. 
        for(int z = (m + n) - 1; z >= 0; z--) {
            if(x < 0) { // NOTE : ALL OF THE `nums1` ELEMENTS HAVE BEEN TRAVERSED
                nums1[z] = nums2[y];

                y--;
            } else if (y < 0) { // NOTE : ALL OF THE `nums2` ELEMENTS HAVE BEEN TRAVERSED
                break;
            } else if (nums1[x] > nums2[y]) { // NOTE : ELEMENT IN `nums1` IS GREATER
                nums1[z] = nums1[x];

                x--;
            } else { // NOTE : CASE WHEN "nums1[x] = nums2[y]" OR "nums1[x] < nums2[y]"
                nums1[z] = nums2[y];

                y--;
            }
        }
    }
};
