Remove Element
- Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.
- Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:
	- Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
	- Return k.

*********************

Example 1:
	- Input: nums = [3,2,2,3], val = 3
	- Output: 2, nums = [2,2,_,_]
	- Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).

*********************

class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int k = 0;

        // NOTE : RETURN EARLY IN THE EVENT `nums` CONTAINS NO ELEMENTS
        if(nums.size() == 0) {
            return k;
        }

        // NOTE : TRAVERSE ARRAY OF `nums` FROM `0` TO `nums.size() - 1`, CHECKING EACH VALUE IN THE PROCESS
        while (k <= nums.size() - 1) {
            if(nums[k] == val) {
                nums.erase(nums.begin() + k);

                // NOTE : ARRAY OF `nums` HAS BEEN EXHAUSTED 
                if(nums.size() == 0) {
                    break;
                }
            } else {
                k++;
            }
        }

        return k;
    }
};

/*
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int k = 0;

        while (k < nums.size()) {
            if(nums[k] == val) {
                nums.erase(nums.begin() + k);
            } else {
                k++;
            }
        }

        return k;
    }
};
*/